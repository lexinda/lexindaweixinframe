<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper  
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">  
<mapper namespace="com.lexindasoft.lexindaframe.dao.AdminDao">  

	<select id="getUser" parameterType="map" resultType="Admin">  
        select user_id userId,
        	   user_name userName,
        	   user_password userPassword,
        	   role_id roleId,
        	   lastlogin_ip lashloginIp,
        	   lastlogin_time lastloginTime,
        	   user_email userEmail,
        	   real_name realName,
        	   user_status userStatus,
        	   store_id storeId,
        	   openid openId,
        	   bank_type bankType,
        	   create_time createTime
        from admin 
        where user_name = #{userName} and user_password = #{userPassword}  
    </select>
    <update id="updateUser" parameterType="Admin">
		update admin set user_name=#{userName},user_password=#{userPassword},role_id=#{roleId},lastlogin_ip=#{lastloginIp},
		 lastlogin_time=#{lastloginTime},user_email=#{userEmail},real_name=#{realName},user_status=#{userStatus}, store_id=#{storeId} where user_id=#{userId}
	</update>
	<select id="getUserById" parameterType="int" resultType="Admin">  
        select user_id userId,
        	   user_name userName,
        	   user_password userPassword,
        	    a.role_id roleId,
        	   b.role_name roleName,
        	   lastlogin_ip lashloginIp,
        	   lastlogin_time lastloginTime,
        	   user_email userEmail,
        	   real_name realName,
        	   user_status userStatus,
        	   store_id storeId,
        	   openid openId,
        	   bank_type bankType,
        	   create_time createTime 
        from admin a,admin_role b where a.role_id = b.role_id
        and user_id=#{userId} 
    </select>
	
	<select id="getUserList" parameterType="map" resultType="Admin">  
        select user_id userId,
        	   user_name userName,
        	   user_password userPassword,
        	   a.role_id roleId,
        	   b.role_name roleName,
        	   lastlogin_ip lashloginIp,
        	   lastlogin_time lastloginTime,
        	   user_email userEmail,
        	   real_name realName,
        	   user_status userStatus,
        	   store_id storeId,
        	   openid openId,
        	   bank_type bankType,
        	   a.bank_desc bankName,
        	   create_time createTime 
        from (select * from admin left join bank_list on bank_type = bank_id) a,admin_role b where a.role_id = b.role_id 
        <if test="roleId == 2">
        	and a.role_id &lt;&gt; 1 
        </if>
        order by lastlogin_time desc
        <if test="limit > 0">
         limit #{index},#{limit}
        </if>
    </select>
	<select id="countUserList" parameterType="map" resultType="int">  
        select count(*) from admin
        <if test="roleKey > 0">
        	where role_id=#{roleKey}
        </if>
        <if test="roleKey == 0">
        	where role_id &lt;&gt; 1
        </if>
    </select>
    <select id="checkUserName" parameterType="String" resultType="int">  
       select count(*) from admin where user_name =#{userName}
    </select>
    <insert id="addUser" parameterType="Admin" useGeneratedKeys="true" keyProperty="id">
    insert into admin(user_name,user_password,role_id,user_email,real_name,user_status,openid,bank_type,create_time)
	 	  values (#{userName},#{userPassword},#{roleId},#{userEmail},#{realName},#{userStatus},#{openId},#{bankType},now())
    </insert>
    <delete id="delUser" parameterType="int" >
	  delete from admin where user_id = #{userid}
	</delete>
	 <select id="countUserSearchList" parameterType="map" resultType="int">  
       select count(*) from admin where 1=1 
       <if test="userId>0">
      	and	user_id = #{userId}
       </if>
       <if test="userName != ''">
       	and user_name like #{userName}
       </if>
       <if test="roleId>0">
        and role_id = #{roleId}
       </if>
    </select>
    <select id="getUserSearchList" parameterType="map" resultType="Admin">  
        select user_id userId,
        	   user_name userName,
        	   user_password userPassword,
        	   a.role_id roleId,
        	   b.role_name roleName,
        	   lastlogin_ip lashloginIp,
        	   lastlogin_time lastloginTime,
        	   user_email userEmail,
        	   real_name realName,
        	   user_status userStatus,
        	   store_id storeId,
        	   openid openId,
        	   bank_type bankType,
        	   a.bank_desc bankName,
        	   create_time createTime 
        from (select * from admin left join bank_list on bank_type = bank_id) a,admin_role b where a.role_id = b.role_id
       <if test="userId>0">
      	and	user_id = #{userId}
       </if>
       <if test="userName != ''">
       	and user_name like #{userName}
       </if>
       <if test="roleId>0">
        and a.role_id = #{roleId}
       </if>
       <if test="limit>0">
       	order by lastlogin_time desc limit #{index},#{limit}
       </if>
       </select>
       
       <insert id="insertWeixinUser" parameterType="UserInfo" useGeneratedKeys="true" keyProperty="id">
   			 insert into weixin_user(subscribe,openid,nickname,sex,language,city,province,country,headimgurl,subscribe_time,
				create_time,update_time
   			 )
	 	  values (#{subscribe},#{openid},#{nickname},#{sex},#{language},#{city},#{province},#{country},#{headimgurl},#{subscribe_time},
			now(),now())
    	</insert>
    	<update id="updateWeixinUser" parameterType="UserInfo">
		update weixin_user set 
		subscribe = #{subscribe},nickname = #{nickname},sex = #{sex},language = #{language},city = #{city},province = #{province},
		country = #{country},headimgurl = #{headimgurl},subscribe_time = #{subscribe_time},update_time = now() where openid=#{openid}
		</update>
		<select id="queryUserByOpenId" parameterType="String" resultType="UserInfo">  
	        select 
	        	id as id,
				subscribe as subscribe,
				openid as openid,
				nickname as nickname,
				sex as sex,
				language as language,
				city as city,
				province as province,
				country as country,
				headimgurl as headimgurl,
				subscribe_time as subscribe_time,
				create_time as createTime,
				update_time as updateTime
	        from weixin_user
	        	where openid = #{openid}
	    </select>
	    
	    <insert id="insertWeixinBusiness" parameterType="weixinBusiness" useGeneratedKeys="true" keyProperty="id">
   			 insert into weixin_business(openid,receipt_name,business_name,telephone,address,type,create_time,status,update_time,sax,province,city,area,street

   			 )
	 	  values (#{openid},#{receiptName},#{businessName},#{telephone},#{address},#{type},now(),0,now(),#{sax},#{province},#{city},#{area},#{street})
    	</insert>
    	<update id="updateWeixinBusiness" parameterType="map">
		update weixin_business set 
		handle_people = #{handlePeople},handle_telephone = #{handleTelephone},update_time = now(),status=1 where id=#{id}
		</update>
		<select id="queryWeixinBusiness" parameterType="weixinBusiness" resultType="weixinBusiness">  
	        select 
	        	id as id,
				openid as openid,
				receipt_name as receiptName,
				business_name as businessName,
				telephone as telephone,
				address as address,
				type as type,
				create_time as createTime,
				status as status,
				update_time as updateTime,
				sax as sax,
				handle_people as handlePeople,
				handle_telephone as handleTelephone,
				province as province,
				city as city,
				area as area,
				street as street
	        from weixin_business
	        	where openid = #{openid} and type=#{type} order by create_time desc limit 1
	    </select>
	    
	    <select id="queryAllWeixinBusiness" parameterType="weixinBusiness" resultType="weixinBusiness">  
	        select 
	        	id as id,
				openid as openid,
				receipt_name as receiptName,
				business_name as businessName,
				telephone as telephone,
				address as address,
				type as type,
				create_time as createTime,
				status as status,
				update_time as updateTime,
				sax as sax,
				handle_people as handlePeople,
				handle_telephone as handleTelephone,
				province as province,
				city as city,
				area as area,
				street as street
	        from weixin_business
	        	where openid = #{openid} and type=#{type} order by create_time desc
	    </select>
	<!-- final static String admin = "userid,username,password,roleid,lastloginip,lastlogintime,email,realname,status,merchantid";
	
	@SQL("select " + admin + " from admin where username = :1 and password = :2")
	public Admin getUser(String username, String password);
	
	@SQL("select " + admin + " from admin where userid = :1")
	public Admin getUserById(int userid);
	
	@SQL("insert into admin(username,password,roleid,email,realname,status,merchantid)" +
	 	  "values (:1.username,:1.password,:1.roleid,:1.email,:1.realname,:1.status,:1.merchantid)")
	public int addUser(Admin admin);
	
	@SQL("delete from admin where userid = :1")
	public int delUser(int userid);
	
	@SQL("select " + admin + " from admin #if(:1 > 0){where roleid = :1} #if(:1 == 0){where roleid <> 1} order by lastlogintime desc #if(:3 > 0){limit :2,:3}")
	public List<Admin> getUserList(int roleid, int index, int limit);
	
	@SQL("select count(*) from admin #if(:1 > 0){where roleid = :1} #if(:1 == 0){where roleid <> 1}")
	public int countUserList(int roleid);
	
	@SQL("select count(*) from admin where username = :1")
	public int checkUserName(String username);
	
	@SQL("update admin set username=:1.username,password=:1.password,roleid=:1.roleid,lastloginip=:1.lastloginip," +
		 "lastlogintime=:1.lastlogintime,email=:1.email,realname=:1.realname,status=:1.status, merchantid=:1.merchantid where userid=:1.userid")
	public int updateUser(Admin user);
	
	@SQL("select count(*) from admin where #if(:1>0){userid = :1 and } #if(:2>0){username like :3 and } #if(:4>0){roleid=:4 and } userid > 0")
	public int countUserSearchList(int userid, int searchUserName, String username, int roleid);
	
	@SQL("select " + admin + " from admin where #if(:1>0){userid = :1 and } #if(:2>0){username like :3 and } #if(:4>0){roleid=:4 and } userid > 0 order by lastlogintime desc #if(:6 > 0){limit :5,:6}")
	public List<Admin> getUserSearchList(int userid, int searchUserName, String username, int roleid, int index, int limit);
	
	@SQL("select " + admin + " from admin where merchantid = :1")
	public Admin getUserByMerchantId(int merchantId); -->
</mapper>  